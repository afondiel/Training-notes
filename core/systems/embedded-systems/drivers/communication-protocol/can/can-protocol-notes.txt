================= CAN PROTOCOL NOTES =================

CAN = Control Area Network : standards that define how ECUs communicate to each others in vehicule

*Standards : ISO 11898
				    
*Needs : Mores electronics, ECUs, Sensors, Wire harnesses => 

*Pros : speed increase
*Cons : wire lenght decrease 


*ISO 11898 & OSI Model : CAN2.0*

+------------------------+--------------------------+ 
		LAYER			 | Protocol Data Unit (PDU) |
+---+--------------------+--------------------------+
| 7	| Application layer  | 							|
+---+--------------------+							+
| 6	| 					 | 		     DATA			|
+---+--------------------+							+
| 5	|	   				 |							|
+---+--------------------+---------------------------
| 4 |					 | 						    |
+---+--------------------+---------------------------
| 3 |					 |	        			    |
+---+--------------------+---------------------------
| 2	| Data link layer    | 		Frame			    |
+---+--------------------+---------------------------
| 1	|	Physical layer   |	 	Bit, Symbol		    |
+------------------------+--------------------------+
 
* Physical Laye(bit level): wire canh/canL, resistance,  baud, timing bit, package of 0/1
* DataLink Layer(frame level) : frame id, lenght, Tx Node / Rx Node
* Application Layer : Machine/Tractor/Automobile ..

* CAN PROTOCOL *

+------+------+-----+-------------+-------+------------+---------+------+---------+----+--------+
|IDLE  |IFS   | SoF | ARBA		  | CTRL  |    DATA    |	CRC	 | ACK  | EoF	  | IFS|   IDLE | 
+------+------+-----+-------------+-------+------------+---------+------+---------+----+--------+ ...
| //// |2 bits|1 bit| 11 - 29 bits| 6 bits| 0 - 64 bits| 16 bits |2 bits| 7 bits  |IFS |   //// |  
+------+------+-----+-------------+-------+------------+----+----+------+---------+----+--------+


# IFS(Intermission Frame Space) :  minimum bit between 2 msgs
    
 - minimum bit between 2 msgs

# SoF(Start Of Frame) : 
			 
1 bit (0/1)

0 : start
1 : not start

# ARBA (Arbitraction field): handle priority node 
	 
- 11 bits (standard)
- 29 bits (extended)

				^
dominant(0)		|	    +--------       +5
				|   1   |   0  
reccesive(1)	+-------+-------+---->  -5
				no 	 	 priority
				priority
			
			
/!\ every node sending 1 bit, recessive and receiveing at the same time 1 bit dominant LOST the priority
			
# CTRL(Control field) : 

6 bits

+--------+---------+------+-----+----+----+
| IDE(r1)| RSV(r0) | 	    DLC(4)        | 
+--------+---------+-----+-----+-----+----+
|	     |	       | 	 | 	   | 	 | 	  | 
+--------+---------+-----+-----+-----+----+
- IDE : Data format
STANDARD(0)
EXTENDED(1)
- RSV (RESERVED) 

- DLC : Data length / size of data field		 

# DATA(Data field) 
				 
0 - 64 bits

# CRC(Cyclic Redundancy Check)
 	 
16 bits

# ACK(Acknowelged field) : transmission :1 / reception : 0
			 
2 bits

SLOT | Delimiter ( 1 reccesive bit )


# EoF(End of Frame)
 				 
7 bits


# NETWORK Communication 

+------------------------+--------------------------+ 
		LAYER			 | Protocol Data Unit (PDU) |
+---+--------------------+--------------------------+
| 7	| Application layer  | 							|
+---+--------------------+							+
| 6	| 					 | 		     DATA			|
+---+--------------------+							+
| 5	|	   				 |							|
+---+--------------------+---------------------------
| 4 |					 | 						    |
+---+--------------------+---------------------------
| 3 |					 |	        			    |
+---+--------------------+---------------------------
| 2	| Data link layer    | 		Frame			    |
+---+--------------------+---------------------------
| 1	|	Physical layer   |	 	Bit, Symbol		    |
+------------------------+--------------------------+


# CAN  MESSAGE  TYPE

1/ Data frame
2/ Remote Frame (RTR = 1)
3/ Error Frame
4/ Overload Frame


# ERROR DETECTION

-Bit Monitoring ? signal level nok based on the transmitted bits
-Bit stuffing ?  : after 5 consecutive bit w/ same parity a opposite bit signal is adder by the transmitter, then removed by the receiver
-Frame Check  : CRC Delimiter, EOF, Intermision
-ACK Check ? : ACK ERROR
-CRC Check ? : CRC (15 bit) ERROR


# ERROR HANDLING 

-Bit Error ?
-ACK Error ?
-Stuff Error ?
-CRC Error ?
-Form Error ?

ERROR COUNTER per NODE

//TEC (Transmitter Error Counter ) : ?
//REC (Receiver Error Counter ) : ? 

ex :

cnt (TEC, REC) 

cnt +=8;

ACTIVE ERROR : active error flag detected
si cnt > 96 && < 128 

=> node will send 6 dominant bit, 8 recessive => IFS

PASSIVE ERROR : passive error flag detected
si cnt >= 128

=> node will send 6 dominant bit, 8 recessive => IFS


BUS OFF : no error flag detected

si cnt >= 256, then reset to ACTIVE ERROR state


# Bit timing

quanta ? 
clock synchronization? 
 

References: 
https://en.wikipedia.org/wiki/CAN_bus
https://www.kvaser.com/lesson/can-basics-training-introduction/
